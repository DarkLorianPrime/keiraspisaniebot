import json

from vkhandler.Utils.Modules.Config import vk, weeks
from vkhandler.Utils.Modules.Utils.decorators import json_command_handler, command_handler
from vkhandler.Utils.Modules.Utils.functional import isMember
from vkhandler.Utils.Modules.Utils.raspisanie import get_info, week_company, get_week
from vkhandler.Utils.Modules.Utils.validators import is_bot
from vkhandler.Utils.Parser import parsed
from vkhandler.Utils.commands.text import get_text_text, json_keyboard
from vkhandler.models import Group


@json_command_handler('–°–µ–≥–æ–¥–Ω—è', 'today')
def today(**kwargs):
    bot = is_bot(kwargs["chat_id"], kwargs["user_id"])
    chat_id = bot[0]['chat_dict']
    chat_bd = bot[0]['chat_id']
    info = get_info(chat_bd, notsunday=True)
    timetable = info['timetable']['weeks'][info["to_days"]["week_num"]]['days'][info["to_days"]["day_int"]]
    vk.messages.send(**chat_id, message=week_company(**info["to_days"], timetable=timetable, week=False), random_id=0)


@json_command_handler('–≤—Ä–µ–º—è', '–ó–≤–æ–Ω–∫–∏', '–∫–æ–Ω–µ—Ü –ø–∞—Ä—ã')
def get_time(**kwargs):
    bot = is_bot(kwargs["chat_id"], kwargs["user_id"])
    chat_id = bot[0]['chat_dict']
    vk.messages.send(**chat_id, message=get_text_text('time'), random_id=0)


@json_command_handler('–ó–∞–≤—Ç—Ä–∞', 'tommorow')
def tomorrow(**kwargs):
    bot = is_bot(kwargs["chat_id"], kwargs["user_id"])
    chat_id = bot[0]['chat_dict']
    chat_bd = bot[0]['chat_id']
    isMember(kwargs["user_id"], chat_bd)
    info = get_info(chat_bd)
    info["to_days"]["day_int"] += 1
    if info["to_days"]["day_int"] == 6:
        vk.messages.send(**chat_id, message="–ó–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ ü§î", random_id=0)
    timetable = info['timetable']['weeks'][info["to_days"]["week_num"]]['days'][info["to_days"]["day_int"]]
    vk.messages.send(**chat_id, message=week_company(**info["to_days"], timetable=timetable), random_id=0)


@json_command_handler('–°–ª–µ–¥—É—é—â–∞—è', '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è', '–°–ª–µ–¥.')
def next_week(**kwargs):
    isMember(kwargs["user_id"], kwargs["chat_id"])
    bot = is_bot(kwargs["chat_id"], kwargs["user_id"])
    chat_id = bot[0]['chat_dict']
    chat_bd = bot[0]['chat_id']
    vk.messages.send(**chat_id, message=get_week(that_week=False, chat_id=chat_bd), random_id=0)


@json_command_handler('–≠—Ç–∞', '–≠—Ç–∞ –Ω–µ–¥–µ–ª—è', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é')
def this_week(**kwargs):
    bot = is_bot(kwargs["chat_id"], kwargs["user_id"])
    vk.messages.send(**bot[0]["chat_dict"], message=get_week(that_week=True, chat_id=bot[0]["chat_id"]), random_id=0)


@command_handler('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'raspisan', '—Ä–∞—Å–ø')
def button_get_lessons(**kwargs):
    bot = is_bot(kwargs["chat_id"], kwargs["user_id"])
    payload = json.dumps(json_keyboard())
    vk.messages.send(**bot[0]['chat_dict'], message='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:', keyboard=payload, random_id=0)


@command_handler("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ")
def one_of_the_day(**kwargs):
    isMember(kwargs["user_id"], kwargs["chat_id"])
    bot = is_bot(kwargs["chat_id"], kwargs["user_id"])
    chat_id = bot[0]['chat_dict']
    info = get_info(bot[0]['chat_id'])
    days = weeks.index(kwargs["text"].capitalize())
    timetable = info['timetable']['weeks'][info["to_days"]["week_num"]]['days'][days]
    del info["to_days"]["day_int"]
    vk.messages.send(**chat_id,
                     message=week_company(**info["to_days"], timetable=timetable, day_int=days, week=False),
                     random_id=0)


@json_command_handler('–ò–∑–º–µ–Ω–µ–Ω–∏—è', '–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
def changes_lesson(**kwargs):
    bot = is_bot(kwargs["chat_id"], kwargs["user_id"])
    chat_id = bot[0]['chat_dict']
    chat_bd = bot[0]['chat_id']
    isMember(kwargs["user_id"], chat_bd)
    vk.messages.send(**chat_id, message="–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è..", random_id=0)
    group = Group.objects.filter(chat_id=chat_bd).first().group
    parsed.send_pars(group=group, chat_id=chat_id)